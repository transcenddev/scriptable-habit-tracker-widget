// HABIT TRACKER WIDGET by 2049rae (modified for habit tracking)
// for use in scriptable
// Addictive streak-based habit tracker inspired by Atomic Habits

// ===================================================
// USER CONFIGURATION
// ===================================================

// STEP 1: Configure your habits
// Add or remove habits as needed. Each habit needs a unique key.
const HABITS = {
  "sleep": "8h Sleep",
  "routine": "Morning Routine", 
  "meditate": "Meditate",
  "craft": "Personal Craft",
  "exercise": "Exercise",
  "evening": "Evening Routine",
  "diet": "Healthy Diet",
  "read": "Read",
  "pray": "Pray",
  "journal": "Journal"
};

// STEP 2: Set how many days to display (recommendation: 30-90 days)
const DAYS_TO_SHOW = 60;

// STEP 3: Customize colors for maximum motivation
const STREAK_COLORS = {
  0: new Color("#2d2d2d", 0.3),      // Not done (dark gray)
  1: new Color("#22c55e"),           // Done (bright green) 
  "future": new Color("#6b7280", 0.2) // Future days (light gray)
};

const TEXT_COLORS = {
  "primary": new Color("#ffffff"),     // Main text
  "secondary": new Color("#9ca3af"),   // Secondary text
  "streak": new Color("#fbbf24"),      // Streak numbers (golden)
  "success": new Color("#10b981")      // Success indicators
};

// STEP 4: Background customization
const BG_IMAGE_URL = ""; // Add your background image URL or leave blank
const BG_COLOR = "#1f2937";           // Dark background
const BG_OVERLAY_OPACITY = 0.8;

// STEP 5: Layout settings (optimized for iPhone)
const PADDING = 12;
const DOT_SIZE = 4;
const DOT_SPACING = 3;
const SECTION_SPACING = 16;

// ===================================================
// DATA MANAGEMENT
// ===================================================

// Get stored habit data
function getHabitData() {
  const fm = FileManager.iCloud();
  const path = fm.joinPath(fm.documentsDirectory(), "habit-tracker-data.json");
  
  if (fm.fileExists(path)) {
    const data = fm.readString(path);
    return JSON.parse(data);
  }
  
  return {};
}

// Save habit data
function saveHabitData(data) {
  const fm = FileManager.iCloud();
  const path = fm.joinPath(fm.documentsDirectory(), "habit-tracker-data.json");
  fm.writeString(path, JSON.stringify(data));
}

// Get date string in YYYY-MM-DD format
function getDateString(date) {
  return date.toISOString().split('T')[0];
}

// Get today's date string
function getTodayString() {
  return getDateString(new Date());
}

// Calculate streak for a habit
function calculateStreak(habitKey, data) {
  const today = new Date();
  let streak = 0;
  
  for (let i = 0; i < DAYS_TO_SHOW; i++) {
    const checkDate = new Date(today);
    checkDate.setDate(today.getDate() - i);
    const dateStr = getDateString(checkDate);
    
    if (data[dateStr] && data[dateStr][habitKey]) {
      streak++;
    } else {
      break;
    }
  }
  
  return streak;
}

// ===================================================
// WIDGET CREATION
// ===================================================

async function createWidget() {
  const widget = new ListWidget();
  const habitData = getHabitData();
  
  // Set background
  if (BG_IMAGE_URL) {
    try {
      const req = new Request(BG_IMAGE_URL);
      const bgImage = await req.loadImage();
      widget.backgroundImage = bgImage;
    } catch (e) {
      console.log("Couldn't load background image");
    }
  }
  
  // Add background overlay
  const overlay = new LinearGradient();
  overlay.locations = [0, 1];
  overlay.colors = [
    new Color(BG_COLOR, BG_OVERLAY_OPACITY),
    new Color(BG_COLOR, BG_OVERLAY_OPACITY)
  ];
  widget.backgroundGradient = overlay;
  
  widget.setPadding(PADDING, PADDING, PADDING, PADDING);
  
  // Header with motivation
  const header = widget.addStack();
  header.layoutHorizontally();
  
  const titleStack = header.addStack();
  const title = titleStack.addText("üî• HABIT STREAKS");
  title.font = Font.boldSystemFont(16);
  title.textColor = TEXT_COLORS.primary;
  
  header.addSpacer();
  
  const todayText = header.addText(getTodayString());
  todayText.font = Font.systemFont(12);
  todayText.textColor = TEXT_COLORS.secondary;
  
  widget.addSpacer(SECTION_SPACING);
  
  // Calculate streaks and total score
  let totalScore = 0;
  const habitStreaks = {};
  
  Object.keys(HABITS).forEach(habitKey => {
    const streak = calculateStreak(habitKey, habitData);
    habitStreaks[habitKey] = streak;
    totalScore += streak;
  });
  
  // Show total motivation score
  const scoreStack = widget.addStack();
  scoreStack.layoutHorizontally();
  scoreStack.centerAlignContent();
  
  const fireIcon = scoreStack.addText("üöÄ");
  fireIcon.font = Font.systemFont(14);
  
  scoreStack.addSpacer(4);
  
  const scoreText = scoreStack.addText(`Total Streak Power: ${totalScore}`);
  scoreText.font = Font.boldSystemFont(14);
  scoreText.textColor = TEXT_COLORS.streak;
  
  widget.addSpacer(SECTION_SPACING);
  
  // Create habit grid
  const mainStack = widget.addStack();
  mainStack.layoutVertically();
  mainStack.spacing = 8;
  
  const today = new Date();
  
  Object.entries(HABITS).forEach(([habitKey, habitName], index) => {
    const habitStack = mainStack.addStack();
    habitStack.layoutHorizontally();
    habitStack.centerAlignContent();
    
    // Habit name and streak
    const nameStack = habitStack.addStack();
    nameStack.layoutVertically();
    
    const name = nameStack.addText(habitName);
    name.font = Font.systemFont(11);
    name.textColor = TEXT_COLORS.primary;
    
    const streak = habitStreaks[habitKey];
    const streakText = nameStack.addText(`${streak} day${streak !== 1 ? 's' : ''}`);
    streakText.font = Font.boldSystemFont(9);
    streakText.textColor = streak > 0 ? TEXT_COLORS.success : TEXT_COLORS.secondary;
    
    habitStack.addSpacer(8);
    
    // Progress dots (last 14 days)
    const dotsStack = habitStack.addStack();
    dotsStack.layoutHorizontally();
    dotsStack.spacing = DOT_SPACING;
    
    for (let i = 13; i >= 0; i--) {
      const checkDate = new Date(today);
      checkDate.setDate(today.getDate() - i);
      const dateStr = getDateString(checkDate);
      
      const dot = dotsStack.addText("‚óè");
      dot.font = Font.systemFont(DOT_SIZE);
      
      if (i > 0) {
        // Past days
        if (habitData[dateStr] && habitData[dateStr][habitKey]) {
          dot.textColor = STREAK_COLORS[1]; // Completed
        } else {
          dot.textColor = STREAK_COLORS[0]; // Not completed
        }
      } else {
        // Today - check if completed
        if (habitData[dateStr] && habitData[dateStr][habitKey]) {
          dot.textColor = STREAK_COLORS[1]; // Completed today
        } else {
          dot.textColor = STREAK_COLORS[0]; // Not completed yet today
        }
      }
    }
    
    if (index < Object.keys(HABITS).length - 1) {
      mainStack.addSpacer(4);
    }
  });
  
  widget.addSpacer(SECTION_SPACING);
  
  // Motivational footer
  const footerStack = widget.addStack();
  footerStack.layoutHorizontally();
  footerStack.centerAlignContent();
  
  let motivationMessage = "üí™ Keep building!";
  if (totalScore > 50) motivationMessage = "üèÜ You're on fire!";
  else if (totalScore > 20) motivationMessage = "‚ö° Great momentum!";
  else if (totalScore > 5) motivationMessage = "üìà Building habits!";
  
  const motivation = footerStack.addText(motivationMessage);
  motivation.font = Font.systemFont(10);
  motivation.textColor = TEXT_COLORS.secondary;
  
  footerStack.addSpacer();
  
  const tapHint = footerStack.addText("Tap to mark today");
  tapHint.font = Font.systemFont(8);
  tapHint.textColor = TEXT_COLORS.secondary;
  
  return widget;
}

// ===================================================
// INTERACTION HANDLING
// ===================================================

// Handle widget tap - show habit selector
async function handleWidgetTap() {
  const alert = new Alert();
  alert.title = "üéØ Mark Today's Habits";
  alert.message = "Which habits did you complete today?";
  
  const habitData = getHabitData();
  const todayStr = getTodayString();
  
  if (!habitData[todayStr]) {
    habitData[todayStr] = {};
  }
  
  // Add buttons for each habit
  Object.entries(HABITS).forEach(([habitKey, habitName]) => {
    const isCompleted = habitData[todayStr][habitKey] || false;
    const buttonText = `${isCompleted ? '‚úÖ' : '‚¨ú'} ${habitName}`;
    alert.addAction(buttonText);
  });
  
  alert.addCancelAction("Done");
  
  const response = await alert.presentSheet();
  
  if (response !== -1) {
    const habitKeys = Object.keys(HABITS);
    const selectedHabitKey = habitKeys[response];
    
    // Toggle habit completion
    habitData[todayStr][selectedHabitKey] = !habitData[todayStr][selectedHabitKey];
    
    saveHabitData(habitData);
    
    // Show success message
    const successAlert = new Alert();
    const isNowCompleted = habitData[todayStr][selectedHabitKey];
    successAlert.title = isNowCompleted ? "üéâ Habit Completed!" : "üìù Habit Updated";
    successAlert.message = `${HABITS[selectedHabitKey]} ${isNowCompleted ? 'marked as done' : 'unmarked'} for today`;
    successAlert.addAction("OK");
    await successAlert.present();
    
    // Recursively show selector again
    await handleWidgetTap();
  }
}

// ===================================================
// MAIN EXECUTION
// ===================================================

async function main() {
  const widget = await createWidget();
  
  if (config.runsInWidget) {
    Script.setWidget(widget);
  } else {
    // When run in app, show interaction
    await handleWidgetTap();
    widget.presentMedium();
  }
  
  Script.complete();
}

await main();